#!/usr/bin/env python
"""
–£–¥–æ–±–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ PolitAgent —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏.
"""

import os
import sys
import subprocess
from pathlib import Path
from typing import List, Optional

def run_experiment(
    experiment: str = "default",
    model: str = "ollama", 
    model_name: str = "gemma3:latest",
    games: Optional[List[str]] = None,
    runs: int = 1,
    workers: int = 1,
    extra_args: Optional[List[str]] = None
) -> None:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
    
    Args:
        experiment: –ù–∞–∑–≤–∞–Ω–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ (default, full_benchmark, model_comparison)
        model: –ü—Ä–æ–≤–∞–π–¥–µ—Ä –º–æ–¥–µ–ª–∏ (ollama, openai, mistral)
        model_name: –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –º–æ–¥–µ–ª—å
        games: –°–ø–∏—Å–æ–∫ –∏–≥—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        runs: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—É—Å–∫–æ–≤ –Ω–∞ –∏–≥—Ä—É
        workers: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤
        extra_args: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è Hydra
    """
    
    # –ë–∞–∑–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
    cmd = [
        "poetry", "run", "python", "-m", "core.benchmark_hydra",
        f"experiment={experiment}",
        f"model={model}",
        f"model.default_model={model_name}",
        f"experiment.runs_per_game={runs}",
        f"experiment.workers={workers}"
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä—ã –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
    if games:
        games_str = ",".join(games)
        cmd.append(f"experiment.games=[{games_str}]")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if extra_args:
        cmd.extend(extra_args)
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞: {experiment}")
    print(f"üìä –ú–æ–¥–µ–ª—å: {model} ({model_name})")
    print(f"üéÆ –ò–≥—Ä—ã: {games or '–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏'}")
    print(f"üîÑ –ó–∞–ø—É—Å–∫–∏: {runs}")
    print(f"‚ö° –í–æ—Ä–∫–µ—Ä—ã: {workers}")
    print(f"üìù –ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
    print("-" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É
    result = subprocess.run(cmd, cwd=Path(__file__).parent.parent)
    
    if result.returncode == 0:
        print("‚úÖ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π!")
        sys.exit(result.returncode)

def run_model_comparison():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π."""
    print("üî¨ –ó–∞–ø—É—Å–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π Ollama...")
    
    models = [
        ("ollama", "gemma3:latest"),
        ("ollama", "llama3.1:latest"),
        ("ollama", "gemma:2b")
    ]
    
    for provider, model_name in models:
        print(f"\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {provider}: {model_name}")
        run_experiment(
            experiment="default",
            model=provider,
            model_name=model_name,
            games=["askguess"],
            runs=2,
            workers=1
        )

def run_comprehensive_benchmark():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –±–µ–Ω—á–º–∞—Ä–∫."""
    print("üéØ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –±–µ–Ω—á–º–∞—Ä–∫–∞...")
    
    run_experiment(
        experiment="full_benchmark",
        model="ollama",
        model_name="gemma3:latest",
        runs=3,
        workers=2
    )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    import argparse
    
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ PolitAgent")
    parser.add_argument("--experiment", "-e", default="default", 
                       choices=["default", "full_benchmark", "model_comparison"],
                       help="–¢–∏–ø —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞")
    parser.add_argument("--model", "-m", default="ollama",
                       choices=["ollama", "openai", "mistral"],
                       help="–ü—Ä–æ–≤–∞–π–¥–µ—Ä –º–æ–¥–µ–ª–∏")
    parser.add_argument("--model-name", "-n", default="gemma3:latest",
                       help="–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏")
    parser.add_argument("--games", "-g", nargs="+", 
                       choices=["askguess", "spyfall", "beast", "tofukingdom"],
                       help="–ò–≥—Ä—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞")
    parser.add_argument("--runs", "-r", type=int, default=1,
                       help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—É—Å–∫–æ–≤ –Ω–∞ –∏–≥—Ä—É")
    parser.add_argument("--workers", "-w", type=int, default=1,
                       help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤")
    parser.add_argument("--compare-models", action="store_true",
                       help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π")
    parser.add_argument("--comprehensive", action="store_true",
                       help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –±–µ–Ω—á–º–∞—Ä–∫")
    
    args = parser.parse_args()
    
    if args.compare_models:
        run_model_comparison()
    elif args.comprehensive:
        run_comprehensive_benchmark()
    else:
        run_experiment(
            experiment=args.experiment,
            model=args.model,
            model_name=args.model_name,
            games=args.games,
            runs=args.runs,
            workers=args.workers
        )

if __name__ == "__main__":
    main() 