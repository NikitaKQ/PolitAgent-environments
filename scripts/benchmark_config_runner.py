#!/usr/bin/env python3
"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º—ã–π –±–µ–Ω—á–º–∞—Ä–∫-—Ä–∞–Ω–Ω–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π YAML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
"""

import asyncio
import yaml
import sys
import argparse
from pathlib import Path
from typing import Dict, List, Any

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent.parent))

from scripts.benchmark_runner import BenchmarkRunner, ModelConfig, GameConfig

class ConfigurableBenchmarkRunner(BenchmarkRunner):
    """–ë–µ–Ω—á–º–∞—Ä–∫-—Ä–∞–Ω–Ω–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π YAML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    
    def __init__(self, config_path: str = "configs/benchmark_config.yaml"):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open(config_path, 'r', encoding='utf-8') as f:
            self.config = yaml.safe_load(f)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
        results_dir = self.config['benchmark']['results_dir']
        super().__init__(results_dir)
        
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        self._load_config()
    
    def _load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        # –í–µ—Å–∞ –∏–≥—Ä
        self.game_weights = self.config['benchmark']['game_weights']
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä
        self.games = {}
        for game_name, game_config in self.config['games'].items():
            if game_config['enabled']:
                # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å –∏–≥—Ä—ã
                game_class = self._get_game_class(game_name)
                self.games[game_name] = GameConfig(
                    name=game_name,
                    game_class=game_class,
                    num_games=game_config['num_games'],
                    max_rounds=game_config['max_rounds'],
                    enabled=True
                )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–µ–π
        self.models = []
        for model_id, model_config in self.config['models'].items():
            if model_config['enabled']:
                self.models.append(ModelConfig(
                    provider=model_config['provider'],
                    model_name=model_config['model_name'],
                    display_name=model_config['display_name'],
                    temperature=model_config['temperature'],
                    enabled=True
                ))
    
    def _get_game_class(self, game_name: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–ª–∞—Å—Å –∏–≥—Ä—ã –ø–æ –∏–º–µ–Ω–∏."""
        from environments.diplomacy_game.game import DiplomacyGame
        from environments.beast.game import BeastGame
        from environments.spyfall.game import SpyfallGame
        from environments.askguess.game import AskGuessGame
        from environments.tofukingdom.game import TofuKingdomGame
        
        game_classes = {
            "diplomacy": DiplomacyGame,
            "beast": BeastGame,
            "spyfall": SpyfallGame,
            "askguess": AskGuessGame,
            "tofukingdom": TofuKingdomGame
        }
        
        return game_classes[game_name]
    
    def apply_profile(self, profile_name: str):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        if profile_name not in self.config['profiles']:
            raise ValueError(f"–ü—Ä–æ—Ñ–∏–ª—å '{profile_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        profile = self.config['profiles'][profile_name]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä
        if 'games' in profile:
            for game_name, game_settings in profile['games'].items():
                if game_name in self.games:
                    for key, value in game_settings.items():
                        setattr(self.games[game_name], key, value)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
        if 'models' in profile:
            enabled_models = set(profile['models'])
            for model in self.models:
                # –ù–∞—Ö–æ–¥–∏–º ID –º–æ–¥–µ–ª–∏ –≤ –∫–æ–Ω—Ñ–∏–≥–µ
                model_id = None
                for mid, mconfig in self.config['models'].items():
                    if (mconfig['provider'] == model.provider and 
                        mconfig['model_name'] == model.model_name):
                        model_id = mid
                        break
                
                model.enabled = model_id in enabled_models
    
    async def run_benchmark_with_config(self, profile: str = None) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–µ–Ω—á–º–∞—Ä–∫ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞."""
        if profile:
            print(f"üìã –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å: {profile}")
            self.apply_profile(profile)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç–∏
        max_parallel_models = self.config['benchmark']['max_parallel_models']
        max_parallel_games = self.config['benchmark']['max_parallel_games']
        
        print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º–æ–≥–æ PolitAgent Benchmark")
        print(f"üìä –ú–æ–¥–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {len([m for m in self.models if m.enabled])}")
        print(f"üéÆ –ò–≥—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {len([g for g in self.games.values() if g.enabled])}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–Ω—á–º–∞—Ä–∫
        import time
        start_time = time.time()
        benchmark_results = await self.run_benchmark(max_parallel_models, max_parallel_games)
        total_time = time.time() - start_time
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏
        ratings = self.calculate_model_ratings(benchmark_results)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_file, report_file = self.save_results(benchmark_results, ratings)
        
        print(f"\n‚úÖ –ë–µ–Ω—á–º–∞—Ä–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {total_time:.1f} —Å–µ–∫—É–Ω–¥")
        print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {results_file}")
        print(f"üìã –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3
        print("\nüèÜ –¢–û–ü-3 –ú–û–î–ï–õ–ò:")
        for i, rating in enumerate(ratings[:3]):
            print(f"{i+1}. {rating.model_name} - {rating.overall_score:.1f} –æ—á–∫–æ–≤")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI."""
    parser = argparse.ArgumentParser(description="PolitAgent Benchmark Runner")
    parser.add_argument("--config", "-c", default="configs/benchmark_config.yaml",
                       help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    parser.add_argument("--profile", "-p", default=None,
                       help="–ü—Ä–æ—Ñ–∏–ª—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    parser.add_argument("--list-profiles", action="store_true",
                       help="–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏")
    
    args = parser.parse_args()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
    if args.list_profiles:
        with open(args.config, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        
        print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏:")
        for profile_name, profile_data in config['profiles'].items():
            models = profile_data.get('models', [])
            print(f"  ‚Ä¢ {profile_name}: {len(models)} –º–æ–¥–µ–ª–µ–π")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–Ω—á–º–∞—Ä–∫
    runner = ConfigurableBenchmarkRunner(args.config)
    await runner.run_benchmark_with_config(args.profile)

if __name__ == "__main__":
    asyncio.run(main()) 